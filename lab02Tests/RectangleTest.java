/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package lab02;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class LibraryTest {
    @Test
    void testHarnessWorking() {
        assertTrue(true);
    }

    @Test
    void defaultRectangleX() {
        Rectangle r = new Rectangle();
        assertEquals(0, r.getX());
        assertEquals(0, r.getY());
        assertEquals(1, r.getWidth());
        assertEquals(1, r.getHeight());
    }

    @Test
    void customRectangle() {
        Rectangle r = new Rectangle(5, 5, 10, 10);
        assertEquals(5, r.getX());
        assertEquals(5, r.getY());
        assertEquals(10, r.getWidth());
        assertEquals(10, r.getHeight());
    }

    @Test
    void changeWidthValid() {
        Rectangle r = new Rectangle(5,5,10,10);
        r.setWidth(20);
        assertEquals(20, r.getWidth());
    }
    @Test
    void changeHeight()
    {
        Rectangle r = new Rectangle(5,5,10,10);
        r.setHeight(20);
        assertEquals(20, r.getHeight());
    }
    @Test
    void changeWidthNegative() {
        Rectangle r = new Rectangle(5, 5, 10, 10);
        boolean thrown = false;
        try{
            r.setWidth(-10);
        } catch(IllegalArgumentException e){
            thrown = true;
        }
        assertTrue(thrown);
    }
    @Test
    void changeWidthZero() {
        Rectangle r = new Rectangle(5, 5, 10, 10);
        boolean thrown = false;
        try{
            r.setWidth(0);
        } catch(IllegalArgumentException e){
            thrown = true;
        }
        assertTrue(thrown);
    }

    @Test
    void changeHeightNegative() {
        Rectangle r = new Rectangle(5, 5, 10, 10);
        boolean thrown = false;
        try{
            r.setHeight(-10);
        } catch(IllegalArgumentException e){
            thrown = true;
        }
        assertTrue(thrown);
    }

    @Test
    void changeHeightZero() {
        Rectangle r = new Rectangle(5, 5, 10, 10);
        boolean thrown = false;
        try{
            r.setHeight(0);
        } catch(IllegalArgumentException e){
            thrown = true;
        }
        assertTrue(thrown);
    }

    @Test
    void changeX(){
        Rectangle r = new Rectangle(5, 5, 10, 10);
        r.setX(10);
        assertEquals(10, r.getX());
    }

    @Test
    void changeY(){
        Rectangle r = new Rectangle(5, 5, 10, 10);
        r.setY(10);
        assertEquals(10, r.getY());
    }

    @Test
    void Area(){
        Rectangle r = new Rectangle(5, 5, 10, 10);
        assertEquals(10*10, r.getArea());
    }

    @Test
    void EqualRectangles(){
        Rectangle r = new Rectangle(5, 5, 10, 10);
        Rectangle b = new Rectangle(5, 5, 10, 10);
        assertTrue(r.Equals(b));
    }

    @Test
    void NotEqualRectangles(){
        Rectangle r = new Rectangle(5, 5, 10, 10);
        Rectangle b = new Rectangle(6, 5, 8, 10);
        assertFalse(r.Equals(b));
    }

    @Test
    void InsideRectangle(){
        Rectangle r = new Rectangle(5, 5, 10, 10);
        Rectangle b = new Rectangle(4, 4, 8, 9);
        assertTrue(r.Inside(b));
    }

    @Test
    void OutsideRectangle(){
        Rectangle r = new Rectangle(5, 5, 10, 10);
        Rectangle b = new Rectangle(5, 5, 11, 11);
        assertFalse(r.Inside(b));
    }

    @Test
    void OutsideRectangle2(){
        Rectangle r = new Rectangle(5, 5, 10, 10);
        Rectangle b = new Rectangle(2, 5, 9, 10);
        assertFalse(r.Inside(b));
    }

    @Test
    void InsideRectangle2(){
        Rectangle r = new Rectangle(5, 5, 10, 10);
        Rectangle b = new Rectangle(2, 5, 6, 10);
        assertTrue(r.Inside(b));
    }


}
